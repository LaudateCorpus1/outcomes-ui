#! /usr/bin/env groovy

def msg = "`${env.JOB_NAME}` Build ${env.BUILD_NUMBER}:\n${env.BUILD_URL}"

pipeline {
  agent { label 'docker' }

  environment {
    NPM_PRIVATE_REGISTRY = '//instructure.jfrog.io/instructure/api/npm/internal-npm/'
    NPM_PRIVATE_SCOPE    = 'inst'
    NPM_PRIVATE_USERNAME = 'jenkins-ro'
    NPM_PRIVATE_EMAIL    = 'jenkins@instructure.com'
    AWS_ROLE_ARN         = 'arn:aws:iam::307761260553:role/translations-jenkins'
  }

  stages {
    stage('Pre-Build Cleanup') {
      steps {
        script {
          try {
            sh 'docker rm translations'
          } catch (err) {
            echo 'No translations containers to remove'
          }
        }
      }
    }
    stage('Sync Translations') {
      steps {
        withCredentials(
        [
          string(credentialsId: 'NPM_PRIVATE_PASSWORD', variable: 'NPM_PRIVATE_PASSWORD'),
          usernamePassword(credentialsId: 'JIRA_BASIC_AUTH', usernameVariable: 'JIRA_USERNAME', passwordVariable: 'JIRA_PASSWORD')
        ],
        ) {
          // Build UI Container
          sh 'docker build -f Dockerfile --tag ui:latest .'

          // execute the sync command to push and pull catalogs.
          sh '''
          docker run \
            --env NPM_PRIVATE_SCOPE \
            --env NPM_PRIVATE_REGISTRY \
            --env NPM_PRIVATE_PASSWORD \
            --env NPM_PRIVATE_USERNAME \
            --env NPM_PRIVATE_EMAIL \
            --env JIRA_PASSWORD \
            --env JIRA_USERNAME \
            --env AWS_ROLE_ARN \
            --name translations \
            ui:latest bash -c \
              'yarn-private add --ignore-scripts @inst/sync-format-message-translations@1.3.0 && \
              $(yarn bin)/sync-translations --config sync-translations-config.json'
          '''

          // copy out translation files
          sh 'docker cp translations:/usr/src/app/translations/. translations'

          // Remove empty/missing strings from catalogs.
          sh '''#!/bin/bash
            for file in $(ls translations/*.json | grep -v translations/en.json); do
              jq --indent 4 'with_entries(select(.value.message != ""))' $file > tmp.json && mv tmp.json $file
            done
          '''
        }
      }

      post {
        success {
          slackSend channel: '#outcomes', color: 'good', message: "Outcomes Sync Translations Succeeded: $msg"
        }
        failure {
          slackSend channel: '#outcomes', color: 'bad', message: "Outcomes Sync Translations Failed: $msg"
        }
        cleanup {
          sh 'docker rm translations'
        }
      }
    }
  }
}